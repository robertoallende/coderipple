# Hello World Debug Function Deployment Workflow
# Optional infrastructure validation and debugging baseline
# Follows same pattern as deploy-layer-based-infrastructure.yml

name: Deploy Hello World Debug Function

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Hello World deployment action'
        required: true
        type: choice
        options:
          - build-and-deploy
          - test-only
          - cleanup
        default: 'build-and-deploy'
      
      confirm_deploy:
        description: 'Type "yes" to confirm deployment operations'
        required: false
        type: string
        default: ''
      
      test_mode:
        description: 'Testing mode for validation'
        required: false
        type: choice
        options:
          - comprehensive
          - quick
          - platform-only
        default: 'comprehensive'

env:
  AWS_DEFAULT_REGION: ${{ secrets.TF_VAR_aws_region }}
  TF_VAR_aws_region: ${{ secrets.TF_VAR_aws_region }}
  TF_VAR_environment: prod
  TF_VAR_project_name: coderipple
  
  # Use same GitHub configuration as main workflow
  TF_VAR_github_repo_owner: ${{ secrets.TF_VAR_github_repo_owner }}
  TF_VAR_github_repo_name: ${{ secrets.TF_VAR_github_repo_name }}

jobs:
  deploy-helloworld:
    name: Deploy Hello World Debug Function
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install awscli jq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Build Hello World Layer
        if: ${{ github.event.inputs.action == 'build-and-deploy' }}
        run: |
          cd aws/helloworld
          echo "üöÄ Building Hello World debugging layer..."
          ./build_helloworld_layer.sh

      - name: Package Hello World Function
        if: ${{ github.event.inputs.action == 'build-and-deploy' }}
        run: |
          cd aws/helloworld
          echo "üì¶ Packaging Hello World function..."
          ./package_helloworld_function.sh

      - name: Deploy Hello World Layer
        if: ${{ github.event.inputs.action == 'build-and-deploy' && github.event.inputs.confirm_deploy == 'yes' }}
        run: |
          cd aws/helloworld
          echo "üöÄ Deploying Hello World layer..."
          ./deploy_helloworld_layer.sh

      - name: Deploy Hello World Function
        if: ${{ github.event.inputs.action == 'build-and-deploy' && github.event.inputs.confirm_deploy == 'yes' }}
        run: |
          cd aws/helloworld
          echo "üöÄ Deploying Hello World function..."
          ./deploy_helloworld_function.sh

      - name: Setup Function URL with Permissions
        if: ${{ github.event.inputs.action == 'build-and-deploy' && github.event.inputs.confirm_deploy == 'yes' }}
        run: |
          echo "üîó Setting up Function URL with proper permissions..."
          
          # Create function URL if it doesn't exist
          aws lambda create-function-url-config \
            --function-name helloworld-debug \
            --cors '{"AllowCredentials": false, "AllowMethods": ["GET", "POST"], "AllowOrigins": ["*"]}' \
            --auth-type NONE \
            --region ${{ env.AWS_DEFAULT_REGION }} 2>/dev/null || echo "Function URL may already exist"
          
          # Add required permissions for public access
          aws lambda add-permission \
            --function-name helloworld-debug \
            --statement-id FunctionURLAllowPublicAccess \
            --action lambda:InvokeFunctionUrl \
            --principal "*" \
            --function-url-auth-type NONE \
            --region ${{ env.AWS_DEFAULT_REGION }} 2>/dev/null || echo "Permission may already exist"
          
          # Get and display the Function URL
          FUNCTION_URL=$(aws lambda get-function-url-config \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --query 'FunctionUrl' \
            --output text)
          
          echo "‚úÖ Function URL configured: $FUNCTION_URL"
          echo "üîë Permissions added for public access"

      - name: Test Hello World Function - Quick
        if: ${{ github.event.inputs.test_mode == 'quick' || github.event.inputs.action == 'test-only' }}
        run: |
          cd aws/helloworld
          echo "üß™ Quick test of Hello World function..."
          ./test_helloworld.sh

      - name: Test Hello World Function - Comprehensive
        if: ${{ github.event.inputs.test_mode == 'comprehensive' }}
        run: |
          cd aws/helloworld
          echo "üß™ Comprehensive testing of Hello World function..."
          ./test_helloworld.sh
          
          # Additional validation checks
          echo "‚úÖ Performing comprehensive validation..."
          
          aws lambda invoke \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --payload '{"test": "ci-cd-comprehensive", "source": "github-actions"}' \
            --cli-binary-format raw-in-base64-out \
            /tmp/helloworld_comprehensive.json
          
          RESPONSE_BODY=$(cat /tmp/helloworld_comprehensive.json | jq -r '.body' | jq -r '.')
          
          # Validate all key indicators
          echo "$RESPONSE_BODY" | jq -e '.message | contains("Hello World from CodeRipple Debug Layer")' > /dev/null
          echo "$RESPONSE_BODY" | jq -e '.strands_import == "SUCCESS"' > /dev/null
          echo "$RESPONSE_BODY" | jq -e '.platform_info.architecture == "x86_64"' > /dev/null
          echo "$RESPONSE_BODY" | jq -e '.platform_info.system == "Linux"' > /dev/null
          echo "$RESPONSE_BODY" | jq -e '.dependencies_status.boto3 == "SUCCESS"' > /dev/null
          
          echo "‚úÖ All comprehensive validation checks passed!"

      - name: Test Hello World Function - Platform Only
        if: ${{ github.event.inputs.test_mode == 'platform-only' }}
        run: |
          cd aws/helloworld
          echo "üß™ Platform-specific testing..."
          
          aws lambda invoke \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --payload '{"test": "platform-validation"}' \
            --cli-binary-format raw-in-base64-out \
            /tmp/helloworld_platform.json
          
          RESPONSE_BODY=$(cat /tmp/helloworld_platform.json | jq -r '.body' | jq -r '.')
          
          # Platform-specific validation
          ARCH=$(echo "$RESPONSE_BODY" | jq -r '.platform_info.architecture')
          SYSTEM=$(echo "$RESPONSE_BODY" | jq -r '.platform_info.system')
          
          echo "Platform Architecture: $ARCH"
          echo "Platform System: $SYSTEM"
          
          if [ "$ARCH" = "x86_64" ] && [ "$SYSTEM" = "Linux" ]; then
            echo "‚úÖ Platform targeting verified: Linux x86_64"
          else
            echo "‚ùå Platform targeting failed: Expected Linux x86_64, got $SYSTEM $ARCH"
            exit 1
          fi

      - name: Display Function URL for Manual Testing
        if: ${{ github.event.inputs.test_mode == 'comprehensive' }}
        run: |
          echo "üåê Getting Function URL for manual testing..."
          
          # Get the function URL from the deployed function
          FUNCTION_URL=$(aws lambda get-function-url-config \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --query 'FunctionUrl' \
            --output text 2>/dev/null || echo "")
          
          if [ -z "$FUNCTION_URL" ] || [ "$FUNCTION_URL" = "None" ]; then
            echo "‚ö†Ô∏è  No Function URL found"
          else
            echo "‚úÖ Function URL ready for manual testing:"
            echo "üîó $FUNCTION_URL"
            echo ""
            echo "üìã Manual test commands:"
            echo "curl -X POST \"$FUNCTION_URL\" -H \"Content-Type: application/json\" -d '{\"test\": \"manual\"}'"
            echo ""
            echo "curl -X GET \"$FUNCTION_URL\""
            echo ""
            echo "üéØ Expected: HTTP 200 with 'Hello World from CodeRipple Debug Layer' message"
          fi

      - name: Cleanup Resources
        if: ${{ github.event.inputs.action == 'cleanup' && github.event.inputs.confirm_deploy == 'yes' }}
        run: |
          echo "üßπ Cleaning up Hello World resources..."
          
          # Delete function
          aws lambda delete-function \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} || echo "Function not found"
          
          # Delete function URL
          aws lambda delete-function-url-config \
            --function-name helloworld-debug \
            --region ${{ env.AWS_DEFAULT_REGION }} || echo "Function URL not found"
          
          echo "‚úÖ Cleanup completed"

      - name: Summary Report
        if: always()
        run: |
          echo "üìã Hello World Debug Function Summary"
          echo "=================================="
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "Confirmed: ${{ github.event.inputs.confirm_deploy }}"
          echo "Region: ${{ env.AWS_DEFAULT_REGION }}"
          echo ""
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Hello World debugging function workflow completed successfully"
            echo "‚úÖ Infrastructure validation baseline available"
            echo "‚úÖ Platform targeting verified for CodeRipple deployment"
          else
            echo "‚ùå Hello World debugging function workflow failed"
            echo "üìã Check logs above for debugging information"
          fi
